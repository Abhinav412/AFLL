#code for syntax validation of if statement in python using ply tool
#importing the lexer and parser generated by PLY
from if_lex import tokens
import ply.yacc as yacc
import sys
#defining the start symbol
start = 'if'
#defining the grammar rules for the start symbol
def p_if(p):
    '''if : IF LPAREN exp RPAREN LBRACE stmt RBRACE
          | IF LPAREN exp RPAREN LBRACE stmt RBRACE ELSE LBRACE stmt RBRACE'''
    if len(p) == 8:
        p[0] = ("if", p[3], p[6])
        print("Syntax validation successful")
    elif len(p) == 12:
        p[0] = ("if", p[3], p[6], p[10])
        print("Syntax validation successful")
#defining the grammar rules for the expression
def p_exp(p):
    '''exp : exp PLUS term
           | exp MINUS term
           | term'''
    if len(p) == 4:
        if p[2] == '+':
            p[0] = p[1] + p[3]
        elif p[2] == '-':
            p[0] = p[1] - p[3]
    else:
        p[0] = p[1]

def p_term(p):
    '''term : term TIMES factor
            | term DIVIDE factor
            | factor'''
    if len(p) == 4:
        if p[2] == '*':
            p[0] = p[1] * p[3]
        elif p[2] == '/':
            p[0] = p[1] / p[3]
    else:
        p[0] = p[1]
#defining the grammar rules for the factor
def p_factor(p):
    '''factor : NUMBER'''
    p[0] = p[1]
#defining the grammar rules for the statement
def p_stmt(p):
    '''stmt : exp'''
    p[0] = p[1]
#defining the error rule
def p_error(p):
    print("Syntax error at '%s'" % p.value)
#building the parser
parser = yacc.yacc()
#reading the input from the file
file = open(sys.argv[1], "r")
data = file.read()
#parsing the input
parser.parse(data)
#closing the file
file.close()